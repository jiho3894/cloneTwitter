{"version":3,"sources":["fbase.js","routes/Auth.js","routes/Home.js","components/Navigation.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","Auth","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","type","placeholder","required","onClick","prev","Home","nweet","setNweet","collection","add","liveTime","Date","now","maxLength","Navigation","to","Profile","history","useHistory","signOut","push","RouterHandle","isLoggedIn","exact","path","App","init","setInit","setIsLoggedIn","useEffect","onAuthStateChanged","user","Router","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ae67223.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n  appId: process.env.REACT_APP_APP_ID\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\n\r\nexport const authService = firebase.auth();\r\n\r\nexport const dbService = firebase.firestore();","import { authService, firebaseInstance } from 'fbase';\r\nimport React, { useState } from 'react';\r\n\r\nconst Auth = () => {\r\n  const [email , setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [newAccount, setNewAccount] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n  const onChange = (event) => {\r\n    const {target: {name, value}} = event;\r\n    if(name === \"email\") {\r\n      setEmail(value);\r\n    } else if(name === \"password\") {\r\n      setPassword(value);\r\n    }\r\n  }\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      let data;\r\n      if(newAccount) {\r\n        data = await authService.createUserWithEmailAndPassword(email, password);\r\n      } else {\r\n        data = await authService.signInWithEmailAndPassword(email, password);\r\n      }\r\n      console.log(data);\r\n    } catch(error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const toggleAccount = () => setNewAccount((prev) => !prev);\r\n\r\n  const onSocialClick = async (event) => {\r\n    const {\r\n      target : {name}\r\n    } = event;\r\n    let provider;\r\n    if(name === \"google\") {\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n    } else if(name === \"github\") {\r\n      provider = new firebaseInstance.auth.GithubAuthProvider();\r\n    }\r\n    await authService.signInWithPopup(provider);\r\n  };\r\n  \r\n  return (\r\n    <div>\r\n      <form onSubmit={onSubmit}>\r\n        <input \r\n          name=\"email\" \r\n          type=\"text\" \r\n          placeholder=\"이메일\" \r\n          required value={email} \r\n          onChange={onChange}\r\n        />\r\n        <input \r\n          name=\"password\" \r\n          type=\"password\" \r\n          placeholder=\"비밀번호\" \r\n          required value={password} \r\n          onChange={onChange}\r\n        />\r\n        <input type=\"submit\" value={newAccount ? \"계정 생성\" : \"로그인\"}/>\r\n        {error}\r\n      </form>\r\n      <span onClick={toggleAccount}>{newAccount ? \"로그인\" : \"계정 생성\"}</span>\r\n      <div>\r\n        <button onClick={onSocialClick} name=\"google\">구글 아이디로 로그인</button>\r\n        <button onClick={onSocialClick} name=\"github\">깃허브 아이디로 로그인</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Auth;","import { dbService } from 'fbase';\r\nimport React, { useState } from 'react';\r\n\r\nconst Home = () => {\r\n  const [nweet, setNweet] = useState(\"\");\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    await dbService.collection(\"nweet\").add({\r\n      nweet,\r\n      liveTime : Date.now()\r\n    });\r\n    setNweet(\"\");\r\n  }\r\n  const onChange = (event) => {\r\n    const {target : {value}} = event;\r\n    setNweet(value);\r\n  }\r\n  return (\r\n    <div>\r\n      <form onSubmit={onSubmit}>\r\n        <input type=\"text\" value={nweet} onChange={onChange} placeholder=\"당신의 상태를 적어주세요\" maxLength={100}/>\r\n        <input type=\"submit\" value=\"Nweet\"/>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\nexport default Home;","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Navigation = () => (\r\n  <nav>\r\n    <ul>\r\n      <li>\r\n        <Link to=\"/\">Home</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/profile\">My Profile</Link>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n\r\n\r\n);\r\n\r\nexport default Navigation;","import { authService } from 'fbase';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Profile = () => {\r\n  const history = useHistory();\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    history.push(\"/\");\r\n  }\r\n  return(\r\n    <>\r\n      <button onClick={onLogOutClick}>Log Out</button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Auth from 'routes/Auth';\r\nimport Home from 'routes/Home';\r\nimport Navigation from \"components/Navigation\";\r\nimport Profile from 'routes/Profile';\r\n\r\nconst RouterHandle = ({isLoggedIn}) => {\r\n  return (\r\n    <Router>\r\n      {isLoggedIn && <Navigation/>}\r\n      <Switch>\r\n        {isLoggedIn ? (\r\n        <>\r\n        <Route exact path=\"/\">\r\n          <Home/>\r\n        </Route>\r\n        <Route exact path=\"/profile\">\r\n          <Profile/>\r\n        </Route>\r\n        </>\r\n        ) : (\r\n        <Route exact path=\"/\">\r\n          <Auth/>\r\n        </Route>\r\n        )}\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default RouterHandle;","import React, { useEffect, useState } from \"react\";\nimport RouterHandle from \"components/Router\";\nimport {authService} from \"fbase\";\n\nconst App = () => {\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n    if(user) {\n      setIsLoggedIn(true);\n    } else {\n      setIsLoggedIn(false);\n    } \n    setInit(true);\n  });\n  }, []);\n  return (\n    <>\n    {init ? <RouterHandle isLoggedIn={isLoggedIn}/> : \"로딩중...\"}\n    <footer>&copy; {new Date().getFullYear()} Nwitter </footer>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}